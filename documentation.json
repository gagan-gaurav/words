{
    "pipes": [],
    "interfaces": [
        {
            "name": "box",
            "id": "interface-box-4e5d3b7d2ee1579fbb792c201843ccd1a4305e7e8c27387f8ab0ab98dc9c4b3ac8d309cab8781f88bc5aec23b565f929996a2ed03f67e1bc2ae1437fdadf3fd6",
            "file": "src/app/word/word.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, EventEmitter, HostListener, Output } from '@angular/core';\r\n\r\n\r\nconst WIDTH = 8;\r\nconst HEIGHT = 8;\r\n\r\n\r\ninterface row {\r\n  column: box[];\r\n}\r\n\r\ninterface box {\r\n  text: string;\r\n  x: number;\r\n  y: number;\r\n  state: states;\r\n}\r\n\r\nenum states {\r\n  NOT_SELECTED,\r\n  SELECTED,\r\n  RIGHT,\r\n  WRONG\r\n}\r\n\r\n@Component({\r\n  selector: 'app-word',\r\n  templateUrl: './word.component.html',\r\n  styleUrls: ['./word.component.scss']\r\n})\r\n\r\n\r\n\r\nexport class WordComponent {\r\n\r\n\r\n  @Output() open: EventEmitter<Boolean> = new EventEmitter;\r\n\r\n  Grid: row[] = [];\r\n  CurrentWord: box[] = [];\r\n  Word: string = '';\r\n  Alphabets: string[] = ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'B', 'B', 'C', 'C', 'C', 'C', 'C',\r\n    'D', 'D', 'D', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'F', 'F', 'G', 'G', 'H', 'H',\r\n    'H', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'J', 'K', 'L', 'L', 'L', 'L', 'L', 'M', 'M', 'M', 'N', 'N',\r\n    'N', 'N', 'N', 'N', 'N', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'P', 'P', 'P', 'Q', 'R', 'R', 'R', 'R',\r\n    'R', 'R', 'R', 'S', 'S', 'S', 'S', 'S', 'T', 'T', 'T', 'T', 'T', 'T', 'T', 'U', 'U', 'U', 'U', 'V',\r\n    'W', 'X', 'Y', 'Y', 'Z'];\r\n\r\n  not_selected = states.NOT_SELECTED;\r\n  selected = states.SELECTED;\r\n  right = states.RIGHT;\r\n  wrong = states.WRONG;\r\n\r\n  box_id: number = 0;\r\n\r\n  mouse_hold: boolean = false;\r\n\r\n  currentX: number = -1;\r\n  currentY: number = -1;\r\n  preX: number = -1;\r\n  preY: number = -1;\r\n\r\n  game_score: number = 0;\r\n  score_updated: boolean = false;\r\n\r\n  show_menu: boolean = false;\r\n  timer_running: boolean = false;\r\n\r\n  // fetch here.\r\n\r\n  array_length: number = 0;\r\n  url_const: string = 'https://api.dictionaryapi.dev/api/v2/entries/en/';\r\n  final_url: string = '';\r\n\r\n  constructor() {\r\n    // show the main menu\r\n    // this.show_menu = true;\r\n    //make the grid.\r\n    for (let i = 0; i < HEIGHT; i++) {\r\n      const column: box[] = [];\r\n      for (let j = 0; j < WIDTH; j++) {\r\n        let char: string = this.generate_char();\r\n        column.push({ text: char, x: j, y: i, state: states.NOT_SELECTED });\r\n        this.box_id++;\r\n      }\r\n      this.Grid.push({ column });\r\n    }\r\n  }\r\n\r\n  //generates random character;\r\n  generate_char() {\r\n    // let char : string = String.fromCharCode(65 + Math.floor(Math.random() * 26));\r\n    let char: string = this.Alphabets[Math.floor(Math.random() * 100)];\r\n    return char;\r\n  }\r\n\r\n  // this is executed when mouse is over the letter box and click is pressed.\r\n  mymethod_over(x: number, y: number) {\r\n    // console.log(x, y);\r\n    this.currentX = x;\r\n    this.currentY = y;\r\n    if (this.mouse_hold && this.Grid[y].column[x].state === this.not_selected) {\r\n      const char = this.Grid[y].column[x].text;\r\n      this.Word += char.toLowerCase();\r\n      this.CurrentWord.push(this.Grid[y].column[x]);\r\n      this.Grid[y].column[x].state = this.selected;\r\n    }\r\n  }\r\n\r\n  // this is executed when mouse is not over the letter box or when mouse leaves the box.\r\n  mymethod_out(x: number, y: number) {\r\n    this.currentX = -1;\r\n    this.currentY = -1;\r\n  }\r\n\r\n  // listen to the mouseclick is pressed.\r\n  @HostListener('document:mousedown', ['$event'])\r\n  onMouseDown(event: MouseEvent) {\r\n    // console.log(this.mouse_hold);\r\n    this.mouse_hold = true;\r\n    if (this.currentX != -1 || this.currentY != -1) this.mymethod_over(this.currentX, this.currentY);\r\n  }\r\n\r\n  // listen to when click is left.\r\n  @HostListener('document:mouseup', ['$event'])\r\n  async onMouseUp(event: MouseEvent) {\r\n    // lift the mouse first.\r\n    this.mouse_hold = false;\r\n\r\n    console.log(this.Word);\r\n\r\n    if (this.Word.length !== 0) {\r\n      // make the url;\r\n      this.final_url = this.url_const + this.Word;\r\n      //call async http req. to set the array_length from the json data.\r\n      console.log('sending', this.array_length);\r\n\r\n      const url: string = this.final_url;\r\n      //check word from the dictonary.\r\n      const options = {\r\n        method: 'GET',\r\n      };\r\n\r\n      await fetch(url, options)\r\n        .then(response => response.json())\r\n        .then((data) => {\r\n          console.log(data);\r\n          console.log(data.length);\r\n          this.array_length = data.length;\r\n        })\r\n        .catch(err => console.error(err));\r\n\r\n      console.log('receiving', this.array_length);\r\n\r\n      // check it the word formed is valid or not.\r\n      if (this.array_length !== undefined && this.array_length !== 0) {\r\n        for (let i = 0; i < this.CurrentWord.length; i++) {\r\n          this.CurrentWord[i].state = this.right;\r\n        }\r\n\r\n        //generate new characters after 0.5sec.\r\n        setTimeout(() => {\r\n          for (let i = 0; i < this.CurrentWord.length; i++) {\r\n            let char: string = this.generate_char();\r\n            this.CurrentWord[i].state = this.not_selected;\r\n            this.CurrentWord[i].text = char;\r\n          }\r\n\r\n          //add the score.\r\n          this.game_score += this.CurrentWord.length * this.CurrentWord.length;\r\n          this.score_updated = true;\r\n          setTimeout(() => {\r\n            this.score_updated = false;\r\n          }, 1500);\r\n          console.log('score_updated', this.score_updated);\r\n\r\n\r\n          //reset the current word.\r\n          this.Word = '';\r\n          this.CurrentWord = [];\r\n          this.array_length = 0;\r\n        }, 500);\r\n      } else {\r\n        for (let i = 0; i < this.CurrentWord.length; i++) {\r\n          this.CurrentWord[i].state = this.wrong;\r\n        }\r\n\r\n        //reset the current word.\r\n        setTimeout(() => {\r\n          for (let i = 0; i < this.CurrentWord.length; i++) {\r\n            this.CurrentWord[i].state = this.not_selected;\r\n          }\r\n          this.Word = '';\r\n          this.CurrentWord = [];\r\n        }, 500);\r\n      }\r\n    }\r\n  }\r\n\r\n  //for touch screen\r\n  // touch_over(x: number, y: number){\r\n  //   console.log(x, y);\r\n  // }\r\n\r\n\r\n  // change the lenght of time bar according to time.\r\n  bar_length: number = 100;\r\n  start_time = setInterval(() => {\r\n    if (this.timer_running && this.bar_length !== 0) this.bar_length = Math.max(this.bar_length - (100 / 600), 0);  // for 1 minutes\r\n\r\n    // implementing time here.\r\n    if (this.bar_length === 0) {\r\n      this.timer_running = false;\r\n    }\r\n    if (!this.timer_running && this.bar_length === 0) {\r\n      this.show_menu = true;\r\n    }\r\n  }, 100);\r\n\r\n  // // after pressing start on main_menu.\r\n  main_menu() {\r\n    this.bar_length = 100;\r\n    this.show_menu = false;\r\n    this.timer_running = true;\r\n    this.game_score = 0;\r\n    // this.startTimer();\r\n  }\r\n\r\n  show_help_menu: boolean = false;\r\n\r\n  // pause the game for help.\r\n  help() {\r\n    this.show_help_menu = true;\r\n    this.timer_running = false;\r\n    // this.pauseTimer();\r\n  }\r\n\r\n  // resume the game.\r\n  resume() {\r\n    this.show_help_menu = false;\r\n    this.timer_running = true;\r\n    // this.startTimer();\r\n  }\r\n\r\n\r\n\r\n\r\n  /// Does't require this section.\r\n\r\n  // time variables.\r\n  timer_id: any = null;\r\n  time: number = 10000;\r\n  initial_time: number = 0;\r\n  remaining_time: number = 1000 * 60;\r\n\r\n  // pauser the timer.\r\n  pauseTimer() {\r\n    clearTimeout(this.timer_id);\r\n    console.log(\"timer paused\");\r\n    this.timer_id = null;\r\n    this.remaining_time -= Date.now() - this.initial_time;\r\n  }\r\n\r\n  // start the timer.\r\n  startTimer() {\r\n    if (this.timer_id) {\r\n      return;\r\n    }\r\n\r\n    this.initial_time = Date.now()\r\n    this.timer_id = setTimeout(() => {\r\n      this.show_menu = true;\r\n      this.timer_running = false;\r\n      console.log(\"TimesUp\", Date.now() - this.initial_time);\r\n    }, this.remaining_time);\r\n  }\r\n\r\n  openNav() {\r\n    this.open.emit(true);\r\n    console.log('nav');\r\n  }\r\n\r\n}\r\n",
            "properties": [
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "states",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "x",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "y",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "row",
            "id": "interface-row-4e5d3b7d2ee1579fbb792c201843ccd1a4305e7e8c27387f8ab0ab98dc9c4b3ac8d309cab8781f88bc5aec23b565f929996a2ed03f67e1bc2ae1437fdadf3fd6",
            "file": "src/app/word/word.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, EventEmitter, HostListener, Output } from '@angular/core';\r\n\r\n\r\nconst WIDTH = 8;\r\nconst HEIGHT = 8;\r\n\r\n\r\ninterface row {\r\n  column: box[];\r\n}\r\n\r\ninterface box {\r\n  text: string;\r\n  x: number;\r\n  y: number;\r\n  state: states;\r\n}\r\n\r\nenum states {\r\n  NOT_SELECTED,\r\n  SELECTED,\r\n  RIGHT,\r\n  WRONG\r\n}\r\n\r\n@Component({\r\n  selector: 'app-word',\r\n  templateUrl: './word.component.html',\r\n  styleUrls: ['./word.component.scss']\r\n})\r\n\r\n\r\n\r\nexport class WordComponent {\r\n\r\n\r\n  @Output() open: EventEmitter<Boolean> = new EventEmitter;\r\n\r\n  Grid: row[] = [];\r\n  CurrentWord: box[] = [];\r\n  Word: string = '';\r\n  Alphabets: string[] = ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'B', 'B', 'C', 'C', 'C', 'C', 'C',\r\n    'D', 'D', 'D', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'F', 'F', 'G', 'G', 'H', 'H',\r\n    'H', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'J', 'K', 'L', 'L', 'L', 'L', 'L', 'M', 'M', 'M', 'N', 'N',\r\n    'N', 'N', 'N', 'N', 'N', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'P', 'P', 'P', 'Q', 'R', 'R', 'R', 'R',\r\n    'R', 'R', 'R', 'S', 'S', 'S', 'S', 'S', 'T', 'T', 'T', 'T', 'T', 'T', 'T', 'U', 'U', 'U', 'U', 'V',\r\n    'W', 'X', 'Y', 'Y', 'Z'];\r\n\r\n  not_selected = states.NOT_SELECTED;\r\n  selected = states.SELECTED;\r\n  right = states.RIGHT;\r\n  wrong = states.WRONG;\r\n\r\n  box_id: number = 0;\r\n\r\n  mouse_hold: boolean = false;\r\n\r\n  currentX: number = -1;\r\n  currentY: number = -1;\r\n  preX: number = -1;\r\n  preY: number = -1;\r\n\r\n  game_score: number = 0;\r\n  score_updated: boolean = false;\r\n\r\n  show_menu: boolean = false;\r\n  timer_running: boolean = false;\r\n\r\n  // fetch here.\r\n\r\n  array_length: number = 0;\r\n  url_const: string = 'https://api.dictionaryapi.dev/api/v2/entries/en/';\r\n  final_url: string = '';\r\n\r\n  constructor() {\r\n    // show the main menu\r\n    // this.show_menu = true;\r\n    //make the grid.\r\n    for (let i = 0; i < HEIGHT; i++) {\r\n      const column: box[] = [];\r\n      for (let j = 0; j < WIDTH; j++) {\r\n        let char: string = this.generate_char();\r\n        column.push({ text: char, x: j, y: i, state: states.NOT_SELECTED });\r\n        this.box_id++;\r\n      }\r\n      this.Grid.push({ column });\r\n    }\r\n  }\r\n\r\n  //generates random character;\r\n  generate_char() {\r\n    // let char : string = String.fromCharCode(65 + Math.floor(Math.random() * 26));\r\n    let char: string = this.Alphabets[Math.floor(Math.random() * 100)];\r\n    return char;\r\n  }\r\n\r\n  // this is executed when mouse is over the letter box and click is pressed.\r\n  mymethod_over(x: number, y: number) {\r\n    // console.log(x, y);\r\n    this.currentX = x;\r\n    this.currentY = y;\r\n    if (this.mouse_hold && this.Grid[y].column[x].state === this.not_selected) {\r\n      const char = this.Grid[y].column[x].text;\r\n      this.Word += char.toLowerCase();\r\n      this.CurrentWord.push(this.Grid[y].column[x]);\r\n      this.Grid[y].column[x].state = this.selected;\r\n    }\r\n  }\r\n\r\n  // this is executed when mouse is not over the letter box or when mouse leaves the box.\r\n  mymethod_out(x: number, y: number) {\r\n    this.currentX = -1;\r\n    this.currentY = -1;\r\n  }\r\n\r\n  // listen to the mouseclick is pressed.\r\n  @HostListener('document:mousedown', ['$event'])\r\n  onMouseDown(event: MouseEvent) {\r\n    // console.log(this.mouse_hold);\r\n    this.mouse_hold = true;\r\n    if (this.currentX != -1 || this.currentY != -1) this.mymethod_over(this.currentX, this.currentY);\r\n  }\r\n\r\n  // listen to when click is left.\r\n  @HostListener('document:mouseup', ['$event'])\r\n  async onMouseUp(event: MouseEvent) {\r\n    // lift the mouse first.\r\n    this.mouse_hold = false;\r\n\r\n    console.log(this.Word);\r\n\r\n    if (this.Word.length !== 0) {\r\n      // make the url;\r\n      this.final_url = this.url_const + this.Word;\r\n      //call async http req. to set the array_length from the json data.\r\n      console.log('sending', this.array_length);\r\n\r\n      const url: string = this.final_url;\r\n      //check word from the dictonary.\r\n      const options = {\r\n        method: 'GET',\r\n      };\r\n\r\n      await fetch(url, options)\r\n        .then(response => response.json())\r\n        .then((data) => {\r\n          console.log(data);\r\n          console.log(data.length);\r\n          this.array_length = data.length;\r\n        })\r\n        .catch(err => console.error(err));\r\n\r\n      console.log('receiving', this.array_length);\r\n\r\n      // check it the word formed is valid or not.\r\n      if (this.array_length !== undefined && this.array_length !== 0) {\r\n        for (let i = 0; i < this.CurrentWord.length; i++) {\r\n          this.CurrentWord[i].state = this.right;\r\n        }\r\n\r\n        //generate new characters after 0.5sec.\r\n        setTimeout(() => {\r\n          for (let i = 0; i < this.CurrentWord.length; i++) {\r\n            let char: string = this.generate_char();\r\n            this.CurrentWord[i].state = this.not_selected;\r\n            this.CurrentWord[i].text = char;\r\n          }\r\n\r\n          //add the score.\r\n          this.game_score += this.CurrentWord.length * this.CurrentWord.length;\r\n          this.score_updated = true;\r\n          setTimeout(() => {\r\n            this.score_updated = false;\r\n          }, 1500);\r\n          console.log('score_updated', this.score_updated);\r\n\r\n\r\n          //reset the current word.\r\n          this.Word = '';\r\n          this.CurrentWord = [];\r\n          this.array_length = 0;\r\n        }, 500);\r\n      } else {\r\n        for (let i = 0; i < this.CurrentWord.length; i++) {\r\n          this.CurrentWord[i].state = this.wrong;\r\n        }\r\n\r\n        //reset the current word.\r\n        setTimeout(() => {\r\n          for (let i = 0; i < this.CurrentWord.length; i++) {\r\n            this.CurrentWord[i].state = this.not_selected;\r\n          }\r\n          this.Word = '';\r\n          this.CurrentWord = [];\r\n        }, 500);\r\n      }\r\n    }\r\n  }\r\n\r\n  //for touch screen\r\n  // touch_over(x: number, y: number){\r\n  //   console.log(x, y);\r\n  // }\r\n\r\n\r\n  // change the lenght of time bar according to time.\r\n  bar_length: number = 100;\r\n  start_time = setInterval(() => {\r\n    if (this.timer_running && this.bar_length !== 0) this.bar_length = Math.max(this.bar_length - (100 / 600), 0);  // for 1 minutes\r\n\r\n    // implementing time here.\r\n    if (this.bar_length === 0) {\r\n      this.timer_running = false;\r\n    }\r\n    if (!this.timer_running && this.bar_length === 0) {\r\n      this.show_menu = true;\r\n    }\r\n  }, 100);\r\n\r\n  // // after pressing start on main_menu.\r\n  main_menu() {\r\n    this.bar_length = 100;\r\n    this.show_menu = false;\r\n    this.timer_running = true;\r\n    this.game_score = 0;\r\n    // this.startTimer();\r\n  }\r\n\r\n  show_help_menu: boolean = false;\r\n\r\n  // pause the game for help.\r\n  help() {\r\n    this.show_help_menu = true;\r\n    this.timer_running = false;\r\n    // this.pauseTimer();\r\n  }\r\n\r\n  // resume the game.\r\n  resume() {\r\n    this.show_help_menu = false;\r\n    this.timer_running = true;\r\n    // this.startTimer();\r\n  }\r\n\r\n\r\n\r\n\r\n  /// Does't require this section.\r\n\r\n  // time variables.\r\n  timer_id: any = null;\r\n  time: number = 10000;\r\n  initial_time: number = 0;\r\n  remaining_time: number = 1000 * 60;\r\n\r\n  // pauser the timer.\r\n  pauseTimer() {\r\n    clearTimeout(this.timer_id);\r\n    console.log(\"timer paused\");\r\n    this.timer_id = null;\r\n    this.remaining_time -= Date.now() - this.initial_time;\r\n  }\r\n\r\n  // start the timer.\r\n  startTimer() {\r\n    if (this.timer_id) {\r\n      return;\r\n    }\r\n\r\n    this.initial_time = Date.now()\r\n    this.timer_id = setTimeout(() => {\r\n      this.show_menu = true;\r\n      this.timer_running = false;\r\n      console.log(\"TimesUp\", Date.now() - this.initial_time);\r\n    }, this.remaining_time);\r\n  }\r\n\r\n  openNav() {\r\n    this.open.emit(true);\r\n    console.log('nav');\r\n  }\r\n\r\n}\r\n",
            "properties": [
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "box[]",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        }
    ],
    "injectables": [],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-137683fd07213a0d74ae31b3c59149e357ea0bf0adb1abe2554e5daaa8c42e679d41bfcedf75cf02a814c71963db401832fcdf8683fa759786a620c8d2c0edf7",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'words'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent {\r\n  title = 'words';\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<!-- <app-word> </app-word> -->\r\n<app-cm-dashboard></app-cm-dashboard>"
        },
        {
            "name": "DashboardComponent",
            "id": "component-DashboardComponent-a2c9b9ba2ecf67954bf33ed9d8bc7add5ff94c04fa68d4db3b712da9100180010602d429db7a1f1025c71acfe55b954fb1598dc48e2f69613cd62661aa656667",
            "file": "src/app/dashboard/dashboard.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-cm-dashboard",
            "styleUrls": [
                "./dashboard.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dashboard.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "mode",
                    "defaultValue": "new FormControl('over')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "showFiller",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "sidenav",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'sidenav'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "event",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit, ViewChild } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { MatSidenav } from '@angular/material/sidenav';\r\n\r\n@Component({\r\n  selector: 'app-cm-dashboard',\r\n  templateUrl: './dashboard.component.html',\r\n  styleUrls: ['./dashboard.component.scss']\r\n})\r\nexport class DashboardComponent implements OnInit {\r\n\r\n  showFiller = false;\r\n  mode = new FormControl('over');\r\n  @ViewChild('sidenav') sidenav: any;\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  event() {\r\n    console.log('ad');\r\n    this.sidenav.toggle();\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".example-container {\r\n\tposition: absolute;\r\n\ttop: 0;\r\n\tbottom: 0;\r\n\tleft: 0;\r\n\tright: 0;\r\n}\r\n\r\n.example-radio-group {\r\n\tdisplay: block;\r\n\tborder: 1px solid #555;\r\n\tmargin: 20px;\r\n\tpadding: 10px;\r\n}",
                    "styleUrl": "./dashboard.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 14
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-sidenav-container class=\"example-container\">\r\n\t<mat-sidenav #sidenav [mode]=\"'over'\">\r\n\t\t<div style=\"width: 300px;background-color: rgb(123, 82, 28); height: 100%;\">\r\n\r\n\t\t</div>\r\n\t</mat-sidenav>\r\n\r\n\t<mat-sidenav-content>\r\n\t\t<app-word (open)=\"event()\"></app-word>\r\n\t</mat-sidenav-content>\r\n</mat-sidenav-container>"
        },
        {
            "name": "WordComponent",
            "id": "component-WordComponent-4e5d3b7d2ee1579fbb792c201843ccd1a4305e7e8c27387f8ab0ab98dc9c4b3ac8d309cab8781f88bc5aec23b565f929996a2ed03f67e1bc2ae1437fdadf3fd6",
            "file": "src/app/word/word.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-word",
            "styleUrls": [
                "./word.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./word.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "open",
                    "defaultValue": "new EventEmitter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "EventEmitter<Boolean>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "Alphabets",
                    "defaultValue": "['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'B', 'B', 'C', 'C', 'C', 'C', 'C',\r\n    'D', 'D', 'D', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'F', 'F', 'G', 'G', 'H', 'H',\r\n    'H', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'J', 'K', 'L', 'L', 'L', 'L', 'L', 'M', 'M', 'M', 'N', 'N',\r\n    'N', 'N', 'N', 'N', 'N', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'P', 'P', 'P', 'Q', 'R', 'R', 'R', 'R',\r\n    'R', 'R', 'R', 'S', 'S', 'S', 'S', 'S', 'T', 'T', 'T', 'T', 'T', 'T', 'T', 'U', 'U', 'U', 'U', 'V',\r\n    'W', 'X', 'Y', 'Y', 'Z']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "array_length",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "bar_length",
                    "defaultValue": "100",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 207
                },
                {
                    "name": "box_id",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "CurrentWord",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "box[]",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "currentX",
                    "defaultValue": "-1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "currentY",
                    "defaultValue": "-1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "final_url",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 73
                },
                {
                    "name": "game_score",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "Grid",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "row[]",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "initial_time",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 253
                },
                {
                    "name": "mouse_hold",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "not_selected",
                    "defaultValue": "states.NOT_SELECTED",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "preX",
                    "defaultValue": "-1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "preY",
                    "defaultValue": "-1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "remaining_time",
                    "defaultValue": "1000 * 60",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 254
                },
                {
                    "name": "right",
                    "defaultValue": "states.RIGHT",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "score_updated",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "selected",
                    "defaultValue": "states.SELECTED",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "show_help_menu",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 229
                },
                {
                    "name": "show_menu",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "start_time",
                    "defaultValue": "setInterval(() => {\r\n    if (this.timer_running && this.bar_length !== 0) this.bar_length = Math.max(this.bar_length - (100 / 600), 0);  // for 1 minutes\r\n\r\n    // implementing time here.\r\n    if (this.bar_length === 0) {\r\n      this.timer_running = false;\r\n    }\r\n    if (!this.timer_running && this.bar_length === 0) {\r\n      this.show_menu = true;\r\n    }\r\n  }, 100)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 208
                },
                {
                    "name": "time",
                    "defaultValue": "10000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 252
                },
                {
                    "name": "timer_id",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 251
                },
                {
                    "name": "timer_running",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "url_const",
                    "defaultValue": "'https://api.dictionaryapi.dev/api/v2/entries/en/'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 72
                },
                {
                    "name": "Word",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "wrong",
                    "defaultValue": "states.WRONG",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 52
                }
            ],
            "methodsClass": [
                {
                    "name": "generate_char",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "help",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 232,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "main_menu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 221,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "mymethod_out",
                    "args": [
                        {
                            "name": "x",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "y",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "x",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "y",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mymethod_over",
                    "args": [
                        {
                            "name": "x",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "y",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "x",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "y",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onMouseDown",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:mousedown', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onMouseUp",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:mouseup', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openNav",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 278,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "pauseTimer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 257,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resume",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 239,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "startTimer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 265,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "document:mousedown",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 118
                },
                {
                    "name": "document:mouseup",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 126
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, HostListener, Output } from '@angular/core';\r\n\r\n\r\nconst WIDTH = 8;\r\nconst HEIGHT = 8;\r\n\r\n\r\ninterface row {\r\n  column: box[];\r\n}\r\n\r\ninterface box {\r\n  text: string;\r\n  x: number;\r\n  y: number;\r\n  state: states;\r\n}\r\n\r\nenum states {\r\n  NOT_SELECTED,\r\n  SELECTED,\r\n  RIGHT,\r\n  WRONG\r\n}\r\n\r\n@Component({\r\n  selector: 'app-word',\r\n  templateUrl: './word.component.html',\r\n  styleUrls: ['./word.component.scss']\r\n})\r\n\r\n\r\n\r\nexport class WordComponent {\r\n\r\n\r\n  @Output() open: EventEmitter<Boolean> = new EventEmitter;\r\n\r\n  Grid: row[] = [];\r\n  CurrentWord: box[] = [];\r\n  Word: string = '';\r\n  Alphabets: string[] = ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'B', 'B', 'C', 'C', 'C', 'C', 'C',\r\n    'D', 'D', 'D', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'F', 'F', 'G', 'G', 'H', 'H',\r\n    'H', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'J', 'K', 'L', 'L', 'L', 'L', 'L', 'M', 'M', 'M', 'N', 'N',\r\n    'N', 'N', 'N', 'N', 'N', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'P', 'P', 'P', 'Q', 'R', 'R', 'R', 'R',\r\n    'R', 'R', 'R', 'S', 'S', 'S', 'S', 'S', 'T', 'T', 'T', 'T', 'T', 'T', 'T', 'U', 'U', 'U', 'U', 'V',\r\n    'W', 'X', 'Y', 'Y', 'Z'];\r\n\r\n  not_selected = states.NOT_SELECTED;\r\n  selected = states.SELECTED;\r\n  right = states.RIGHT;\r\n  wrong = states.WRONG;\r\n\r\n  box_id: number = 0;\r\n\r\n  mouse_hold: boolean = false;\r\n\r\n  currentX: number = -1;\r\n  currentY: number = -1;\r\n  preX: number = -1;\r\n  preY: number = -1;\r\n\r\n  game_score: number = 0;\r\n  score_updated: boolean = false;\r\n\r\n  show_menu: boolean = false;\r\n  timer_running: boolean = false;\r\n\r\n  // fetch here.\r\n\r\n  array_length: number = 0;\r\n  url_const: string = 'https://api.dictionaryapi.dev/api/v2/entries/en/';\r\n  final_url: string = '';\r\n\r\n  constructor() {\r\n    // show the main menu\r\n    // this.show_menu = true;\r\n    //make the grid.\r\n    for (let i = 0; i < HEIGHT; i++) {\r\n      const column: box[] = [];\r\n      for (let j = 0; j < WIDTH; j++) {\r\n        let char: string = this.generate_char();\r\n        column.push({ text: char, x: j, y: i, state: states.NOT_SELECTED });\r\n        this.box_id++;\r\n      }\r\n      this.Grid.push({ column });\r\n    }\r\n  }\r\n\r\n  //generates random character;\r\n  generate_char() {\r\n    // let char : string = String.fromCharCode(65 + Math.floor(Math.random() * 26));\r\n    let char: string = this.Alphabets[Math.floor(Math.random() * 100)];\r\n    return char;\r\n  }\r\n\r\n  // this is executed when mouse is over the letter box and click is pressed.\r\n  mymethod_over(x: number, y: number) {\r\n    // console.log(x, y);\r\n    this.currentX = x;\r\n    this.currentY = y;\r\n    if (this.mouse_hold && this.Grid[y].column[x].state === this.not_selected) {\r\n      const char = this.Grid[y].column[x].text;\r\n      this.Word += char.toLowerCase();\r\n      this.CurrentWord.push(this.Grid[y].column[x]);\r\n      this.Grid[y].column[x].state = this.selected;\r\n    }\r\n  }\r\n\r\n  // this is executed when mouse is not over the letter box or when mouse leaves the box.\r\n  mymethod_out(x: number, y: number) {\r\n    this.currentX = -1;\r\n    this.currentY = -1;\r\n  }\r\n\r\n  // listen to the mouseclick is pressed.\r\n  @HostListener('document:mousedown', ['$event'])\r\n  onMouseDown(event: MouseEvent) {\r\n    // console.log(this.mouse_hold);\r\n    this.mouse_hold = true;\r\n    if (this.currentX != -1 || this.currentY != -1) this.mymethod_over(this.currentX, this.currentY);\r\n  }\r\n\r\n  // listen to when click is left.\r\n  @HostListener('document:mouseup', ['$event'])\r\n  async onMouseUp(event: MouseEvent) {\r\n    // lift the mouse first.\r\n    this.mouse_hold = false;\r\n\r\n    console.log(this.Word);\r\n\r\n    if (this.Word.length !== 0) {\r\n      // make the url;\r\n      this.final_url = this.url_const + this.Word;\r\n      //call async http req. to set the array_length from the json data.\r\n      console.log('sending', this.array_length);\r\n\r\n      const url: string = this.final_url;\r\n      //check word from the dictonary.\r\n      const options = {\r\n        method: 'GET',\r\n      };\r\n\r\n      await fetch(url, options)\r\n        .then(response => response.json())\r\n        .then((data) => {\r\n          console.log(data);\r\n          console.log(data.length);\r\n          this.array_length = data.length;\r\n        })\r\n        .catch(err => console.error(err));\r\n\r\n      console.log('receiving', this.array_length);\r\n\r\n      // check it the word formed is valid or not.\r\n      if (this.array_length !== undefined && this.array_length !== 0) {\r\n        for (let i = 0; i < this.CurrentWord.length; i++) {\r\n          this.CurrentWord[i].state = this.right;\r\n        }\r\n\r\n        //generate new characters after 0.5sec.\r\n        setTimeout(() => {\r\n          for (let i = 0; i < this.CurrentWord.length; i++) {\r\n            let char: string = this.generate_char();\r\n            this.CurrentWord[i].state = this.not_selected;\r\n            this.CurrentWord[i].text = char;\r\n          }\r\n\r\n          //add the score.\r\n          this.game_score += this.CurrentWord.length * this.CurrentWord.length;\r\n          this.score_updated = true;\r\n          setTimeout(() => {\r\n            this.score_updated = false;\r\n          }, 1500);\r\n          console.log('score_updated', this.score_updated);\r\n\r\n\r\n          //reset the current word.\r\n          this.Word = '';\r\n          this.CurrentWord = [];\r\n          this.array_length = 0;\r\n        }, 500);\r\n      } else {\r\n        for (let i = 0; i < this.CurrentWord.length; i++) {\r\n          this.CurrentWord[i].state = this.wrong;\r\n        }\r\n\r\n        //reset the current word.\r\n        setTimeout(() => {\r\n          for (let i = 0; i < this.CurrentWord.length; i++) {\r\n            this.CurrentWord[i].state = this.not_selected;\r\n          }\r\n          this.Word = '';\r\n          this.CurrentWord = [];\r\n        }, 500);\r\n      }\r\n    }\r\n  }\r\n\r\n  //for touch screen\r\n  // touch_over(x: number, y: number){\r\n  //   console.log(x, y);\r\n  // }\r\n\r\n\r\n  // change the lenght of time bar according to time.\r\n  bar_length: number = 100;\r\n  start_time = setInterval(() => {\r\n    if (this.timer_running && this.bar_length !== 0) this.bar_length = Math.max(this.bar_length - (100 / 600), 0);  // for 1 minutes\r\n\r\n    // implementing time here.\r\n    if (this.bar_length === 0) {\r\n      this.timer_running = false;\r\n    }\r\n    if (!this.timer_running && this.bar_length === 0) {\r\n      this.show_menu = true;\r\n    }\r\n  }, 100);\r\n\r\n  // // after pressing start on main_menu.\r\n  main_menu() {\r\n    this.bar_length = 100;\r\n    this.show_menu = false;\r\n    this.timer_running = true;\r\n    this.game_score = 0;\r\n    // this.startTimer();\r\n  }\r\n\r\n  show_help_menu: boolean = false;\r\n\r\n  // pause the game for help.\r\n  help() {\r\n    this.show_help_menu = true;\r\n    this.timer_running = false;\r\n    // this.pauseTimer();\r\n  }\r\n\r\n  // resume the game.\r\n  resume() {\r\n    this.show_help_menu = false;\r\n    this.timer_running = true;\r\n    // this.startTimer();\r\n  }\r\n\r\n\r\n\r\n\r\n  /// Does't require this section.\r\n\r\n  // time variables.\r\n  timer_id: any = null;\r\n  time: number = 10000;\r\n  initial_time: number = 0;\r\n  remaining_time: number = 1000 * 60;\r\n\r\n  // pauser the timer.\r\n  pauseTimer() {\r\n    clearTimeout(this.timer_id);\r\n    console.log(\"timer paused\");\r\n    this.timer_id = null;\r\n    this.remaining_time -= Date.now() - this.initial_time;\r\n  }\r\n\r\n  // start the timer.\r\n  startTimer() {\r\n    if (this.timer_id) {\r\n      return;\r\n    }\r\n\r\n    this.initial_time = Date.now()\r\n    this.timer_id = setTimeout(() => {\r\n      this.show_menu = true;\r\n      this.timer_running = false;\r\n      console.log(\"TimesUp\", Date.now() - this.initial_time);\r\n    }, this.remaining_time);\r\n  }\r\n\r\n  openNav() {\r\n    this.open.emit(true);\r\n    console.log('nav');\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container{\r\n\theight: 98vh;\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n\talign-items: center;\r\n\tposition: relative;\r\n\tborder: 2px solid #888;\r\n\tborder-radius: 10px;\r\n\r\n\t.title{\r\n\t\twidth: 100%;\r\n\t\theight: 54px;\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t\ttext-transform: uppercase;\r\n\t\tfont-size: 24px;\r\n\t\tfont-weight: bold;\r\n\t\tborder-bottom: 1px solid #ddd;\r\n\t\tfont-family: 'Courier New', Courier, monospace;\r\n\r\n\t\tbutton{\r\n\t\t\tmargin-left: 10px;\r\n\t\t\tbackground-color: lightgoldenrodyellow;\r\n\t\t\talign-self: center;\r\n\t\t\tcolor: black;\r\n\t\t\tfont-weight: bold;\r\n\t\t\tfont-size: 18px;\r\n\t\t\tpadding: 3px 6px;\r\n\t\t\tborder-radius: 4px;\r\n\t\t\tborder: 2px solid #888;\r\n\t\t\tcursor: pointer;\r\n\t\t\tfont-family: 'Courier New', Courier, monospace;\r\n\t\t}\r\n\t}\r\n\r\n\t.timer{\r\n\t\twidth: 100%;\r\n\t\theight: 5px;\r\n\t\tdisplay: flex;\r\n\t\talign-items: left;\r\n\t\tjustify-content: left;\r\n\t\tbackground-color: #888;\r\n\t\t// border-bottom: 1px solid #ddd;\r\n\t\tborder: 1px solid #888;\r\n\r\n\r\n\t\t.temp{\r\n\t\t\theight: 5px;\r\n\t\t\tbackground-color: lightgoldenrodyellow;\r\n\t\t}\r\n\t}\r\n\r\n\t.score{\r\n\t\tpadding: 10px;\r\n\t\theight: 54px;\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t\tfont-size: 20px;\r\n\t\tbox-sizing: border-box;\r\n\t\tborder: 2px solid #888;\r\n\t\tbackground-color: lightgoldenrodyellow;\r\n\t\tborder-radius: 10px;\r\n\t\tmargin-top: 30px;\r\n\t\tfont-family: 'Courier New', Courier, monospace;\r\n\t\tcolor: black;\r\n\t\tfont-weight: bolder;\r\n\t\tuser-select: none;\r\n\r\n\t\t.score-board{\r\n\t\t\tdisplay: flex;\r\n\t\t\talign-items: center;\r\n\t\t\tjustify-content: center;\r\n\t\t\tfont-size: 20px;\r\n\t\t\tfont-weight: bold;\r\n\t\t\tuser-select: none;\r\n\r\n\t\t\t&.selected{\r\n\t\t\t\tanimation-name: score-pop;\r\n\t\t\t\tanimation-duration: 120ms;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t.main{\r\n\t\tflex-grow: 1;\r\n\t\tmargin-top: 30px;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t\t\r\n\t\t.row-container{\r\n\t\t\tdisplay: flex;\r\n\t\t\tmargin-bottom: 8px;\r\n\r\n\t\t\t.column-container{\r\n\t\t\t\twidth: 6vh;\r\n\t\t\t\theight: 6vh;\r\n\t\t\t\t// width: 64px;\r\n\t\t\t\t// height: 64px;\r\n\t\t\t\tbackground-color: white;\r\n\t\t\t\tborder: 2px solid #ddd;\r\n\t\t\t\tbox-sizing: border-box;\r\n\t\t\t\tmargin: 0 4px;\r\n\t\t\t\tdisplay: flex;\r\n\t\t\t\talign-items: center;\r\n\t\t\t\tjustify-content: center;\r\n\t\t\t\t// font-size: 32px;\r\n\t\t\t\tfont-size: 3.2vh;\r\n\t\t\t\tfont-weight: bold;\r\n\t\t\t\ttext-transform: uppercase;\r\n\t\t\t\tuser-select: none;\r\n\t\t\t\tborder-radius: 10px;\r\n\t\t\t\tfont-family: 'Courier New', Courier, monospace;\r\n\r\n\t\t\t\t&.selected{\r\n\t\t\t\t\tborder-color: #888;\r\n\t\t\t\t\tbackground-color: lightgoldenrodyellow;\r\n\t\t\t\t\tanimation-name: letter-pop;\r\n\t\t\t\t\tanimation-duration: 120ms;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t&.right{\r\n\t\t\t\t\tborder-color: #888;\r\n\t\t\t\t\tbackground-color: lightgreen;\r\n\t\t\t\t\tanimation-name: letter-pop2;\r\n\t\t\t\t\tanimation-duration: 400ms;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t&.wrong{\r\n\t\t\t\t\tbackground-color: lightcoral;\r\n\t\t\t\t\tanimation-name: shake;\r\n\t\t\t\t\tanimation-duration: 400ms;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t.info-dialog-container{\r\n\t\tbackground-color: rgba(225, 225, 225, 0.5);\r\n\t\tposition: absolute;\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\talign-items: center;\r\n\t\tvisibility: hidden;\r\n\t\tjustify-content: center;\r\n\t\tdisplay: flex;\r\n\r\n\t\t\t&.show{\r\n\t\t\t\tvisibility: visible;\r\n\t\t\t}\r\n\r\n\t\t\t.info-dialog{\r\n\t\t\t\tposition: absolute;\r\n\t\t\t\twidth: 300px;\r\n\t\t\t\theight: 300px;\r\n\t\t\t\t// width: 10 vh;\r\n\t\t\t\t// height: 10 vh;\r\n\t\t\t\tbackground-color: white;\r\n\t\t\t\tdisplay: flex;\r\n\t\t\t\talign-items: center;\r\n\t\t\t\tjustify-content: center;\r\n\t\t\t\tborder-radius: 8px; \r\n\t\t\t\tbox-shadow: 0 10px 25px -5px rgb(0 0 0 / 0.2), 0 8px 10px -6px rgb(0 0 0 / 0.1);\r\n\t\t\t\topacity: 0;\r\n\t\t\t\ttransform: translateY(30px);\r\n\t\t\t\ttransition: all 300ms ease-out;\r\n\r\n\t\t\t\tbutton{\r\n\t\t\t\t\tbackground-color: lightgoldenrodyellow;\r\n\t\t\t\t\tcolor: black;\r\n\t\t\t\t\tfont-weight: bold;\r\n\t\t\t\t\tfont-size: 18px;\r\n\t\t\t\t\tpadding: 12px 24px;\r\n\t\t\t\t\tborder-radius: 4px;\r\n\t\t\t\t\tborder: 2px solid #888;\r\n\t\t\t\t\tcursor: pointer;\r\n\t\t\t\t\tfont-family: 'Courier New', Courier, monospace;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t&.show{\r\n\t\t\t\t\topacity: 1;\r\n\t\t\t\t\ttransform: translateY(0);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t}\r\n\r\n\t.help-container{\r\n\t\tbackground-color: rgba(225, 225, 225, 0.5);\r\n\t\tposition: absolute;\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\talign-items: center;\r\n\t\tvisibility: hidden;\r\n\t\tjustify-content: center;\r\n\t\tdisplay: flex;\r\n\r\n\t\t&.show-help{\r\n\t\t\tvisibility: visible;\r\n\t\t}\r\n\r\n\t\t.help-box{\r\n\t\t\tposition: absolute;\r\n\t\t\twidth: 640px;\r\n\t\t\theight: 640px;\r\n\t\t\tpadding: 20px 20px;\r\n\t\t\tbackground-color: white;\r\n\t\t\tdisplay: flex;\r\n\t\t\tflex-direction: column;\r\n\t\t\talign-items: center;\r\n\t\t\tjustify-content:flex-start;\r\n\t\t\tmargin-bottom: 150px;\r\n\t\t\tborder-radius: 8px; \r\n\t\t\tbox-shadow: 0 10px 25px -5px rgb(0 0 0 / 0.2), 0 8px 10px -6px rgb(0 0 0 / 0.1);\r\n\t\t\topacity: 0;\r\n\t\t\ttransform: translateY(30px);\r\n\t\t\ttransition: all 300ms ease-out;\r\n\r\n\t\t\t&.show-help{\r\n\t\t\t\topacity: 1;\r\n\t\t\t\ttransform: translateY(0);\r\n\t\t\t}\r\n\r\n\t\t\t.text{\r\n\t\t\t\tfont-size: 20px;\r\n\t\t\t\tfont-weight: bold;\r\n\t\t\t\tfont-family: 'Courier New', Courier, monospace;\r\n\t\t\t\talign-self: center;\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t.images{\r\n\t\t\t\tdisplay: flex;\r\n\t\t\t\tflex-direction: row;\r\n\t\t\t\talign-items: center;\r\n\t\t\t\tjustify-content: center;\r\n\r\n\t\t\t\timg{\r\n\t\t\t\t\theight: 300px;\r\n\t\t\t\t\twidth: 300px;\r\n\t\t\t\t\tmargin: 10px 10px;\r\n\t\t\t\t\tborder: 2px solid #888;\r\n\t\t\t\t\tborder-radius: 8px;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tbutton{\r\n\t\t\t\tmargin-top: 50px;\r\n\t\t\t\tbackground-color: lightgoldenrodyellow;\r\n\t\t\t\tcolor: black;\r\n\t\t\t\tfont-weight: bold;\r\n\t\t\t\tfont-size: 18px;\r\n\t\t\t\tpadding: 12px 24px;\r\n\t\t\t\tborder-radius: 4px;\r\n\t\t\t\tborder: 2px solid #888;\r\n\t\t\t\tcursor: pointer;\r\n\t\t\t\tfont-family: 'Courier New', Courier, monospace;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\t.self{\r\n\t\tbackground-color: lightgoldenrodyellow;\r\n\t\tborder: 2px solid #888;\r\n\t\tborder-radius: 10px;\r\n\t\talign-self: flex-end;\r\n\t\tmargin-right: 5px;\r\n\t\tmargin-bottom: 5px;\r\n\t\tpadding-left: 12px;\r\n\t\tpadding-right: 12px;\r\n\t\tfont-size: 14px;\r\n\t\tfont-weight: bold;\r\n\t\tfont-family: 'Courier New', Courier, monospace;\r\n\t\tuser-select: none;\r\n\t}\r\n}\r\n\r\n@keyframes score-pop {\r\n\t0% {transform: scale(1); }\r\n\t50% {transform: scale(1.5); }\r\n\t100% {transform: scale(1); }\r\n}\r\n\r\n@keyframes letter-pop {\r\n\t0% {transform: scale(1); }\r\n\t50% {transform: scale(1.15); }\r\n\t100% {transform: scale(1); }\r\n}\r\n\r\n@keyframes letter-pop2 {\r\n\t0% {transform: scale(1); }\r\n\t50% {transform: scale(1.15); }\r\n\t100% {transform: scale(1); }\r\n}\r\n\r\n@keyframes letter-pop3 {\r\n\t0% {transform: scale(1); }\r\n\t50% {transform: scale(1.15); }\r\n\t100% {transform: scale(1); }\r\n}\r\n\r\n@keyframes shake {\r\n\t10%,\r\n\t90% {\r\n\t\ttransform : translateX(-1px);\r\n\t}\r\n\r\n\t20%,\r\n\t80% {\r\n\t\ttransform : translateX(2px);\r\n\t}\r\n\r\n\t30%,\r\n\t50%,\r\n\t70% {\r\n\t\ttransform : translateX(-4px);\r\n\t}\r\n\r\n\t40%,\r\n\t60% {\r\n\t\ttransform : translateX(4px);\r\n\t}\r\n}",
                    "styleUrl": "./word.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 73
            },
            "templateData": "<div class=\"container\">\r\n\r\n\t<div class=\"title\" style=\"display: flex; justify-content: space-between;\">\r\n\t\t<div style=\"width: 100px;\">\r\n\t\t\t<button style=\"width: 30px;height: 30px; border-radius: 100%; background-color: aqua;\"\r\n\t\t\t\t(click)=\"openNav()\"></button>\r\n\t\t</div>\r\n\t\t<div style=\"width: max-content;\">\r\n\t\t\tWord Game\r\n\t\t\t<button (click)=\"help()\"> ?\r\n\t\t\t</button>\r\n\t\t</div>\r\n\t\t<div style=\"width: 100px;\"></div>\r\n\t</div>\r\n\r\n\t<div id=\"time\" class=\"timer\">\r\n\t\t<div class=\"temp\" style=\"width: {{bar_length}}%\"> </div>\r\n\t</div>\r\n\r\n\t<div class=\"score\"> Score:\r\n\t\t<div class=\"score-board\" [class.selected]=\"score_updated\"> {{ game_score }} </div>\r\n\t</div>\r\n\r\n\t<div class=\"main\">\r\n\t\t<div class=\"row-container\" *ngFor=\"let row of Grid\" #tryContainer>\r\n\t\t\t<div class=\"column-container\" *ngFor=\"let box of row.column\" id=\"id\"\r\n\t\t\t\t(mouseover)=\"mymethod_over(box.x, box.y)\" (mouseout)=\"mymethod_out(box.x, box.y)\"\r\n\t\t\t\t[class.selected]=\"box.state == selected\" [class.right]=\"box.state == right\"\r\n\t\t\t\t[class.wrong]=\"box.state == wrong\">\r\n\t\t\t\t{{box.text}}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n\r\n\t<div class=\"info-dialog-container\" [class.show]=\"show_menu\">\r\n\t\t<div class=\"info-dialog\" [class.show]=\"show_menu\">\r\n\t\t\t<button (click)=\"main_menu()\"> Start </button>\r\n\t\t</div>\r\n\t</div>\r\n\r\n\t<div class=\"self\">\r\n\t\t<p class=\"text\"> Made by Gagan</p>\r\n\t</div>\r\n\r\n\t<div class=\"help-container\" [class.show-help]=\"show_help_menu\">\r\n\t\t<div class=\"help-box\" [class.show-help]=\"show_help_menu\">\r\n\t\t\t<p class=\"text\"> * Make a valid word of any length without lifting your mouse.\r\n\t\t\t\t<br><br>\r\n\t\t\t\t* Time Limit: 1 minute.\r\n\t\t\t</p>\r\n\t\t\t<div class=\"images\">\r\n\t\t\t\t<img src=assets\\images\\img1.png>\r\n\t\t\t\t<img src=assets\\images\\img2.png>\r\n\t\t\t</div>\r\n\t\t\t<button (click)=\"resume()\">\r\n\t\t\t\tResume\r\n\t\t\t</button>\r\n\t\t</div>\r\n\t</div>\r\n</div>"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-870f8a96b25b4a19dd0d0e657258c83cbbbbc9417afa728d2573199216fda994eeb944c150522681a8a76fbbf6bf5d449ecf44ff8339789f488910df5d2d979c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { DashboardComponent } from './dashboard/dashboard.component';\r\nimport { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { WordComponent } from './word/word.component';\r\n\r\n\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { APP_BASE_HREF, CommonModule } from '@angular/common';\r\n// Material Form Controls\r\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSliderModule } from '@angular/material/slider';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\n// Material Navigation\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatSidenavModule } from '@angular/material/sidenav';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\n// Material Layout\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatDividerModule } from '@angular/material/divider';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { MatGridListModule } from '@angular/material/grid-list';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { MatStepperModule } from '@angular/material/stepper';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { MatTreeModule } from '@angular/material/tree';\r\n// Material Buttons & Indicators\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatChipsModule } from '@angular/material/chips';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\r\nimport { MatRippleModule } from '@angular/material/core';\r\n// Material Popups & Modals\r\nimport { MatBottomSheetModule } from '@angular/material/bottom-sheet';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\n// Material Data tables\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatSortModule } from '@angular/material/sort';\r\nimport { MatTableModule } from '@angular/material/table';\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    WordComponent,\r\n    DashboardComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    BrowserAnimationsModule,\r\n    MatSidenavModule,\r\n    CommonModule,\r\n    MatAutocompleteModule,\r\n    MatCheckboxModule,\r\n    MatDatepickerModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatRadioModule,\r\n    MatSelectModule,\r\n    MatSlideToggleModule,\r\n    MatMenuModule,\r\n    MatSidenavModule,\r\n    MatToolbarModule,\r\n    MatCardModule,\r\n    MatDividerModule,\r\n    MatExpansionModule,\r\n    MatGridListModule,\r\n    MatListModule,\r\n    MatStepperModule,\r\n    MatTabsModule,\r\n    MatTreeModule,\r\n    MatButtonModule,\r\n    MatButtonToggleModule,\r\n    MatBadgeModule,\r\n    MatChipsModule,\r\n    MatIconModule,\r\n    MatProgressSpinnerModule,\r\n    MatProgressBarModule,\r\n    MatRippleModule,\r\n    MatBottomSheetModule,\r\n    MatDialogModule,\r\n    MatSnackBarModule,\r\n    MatTooltipModule,\r\n    MatPaginatorModule,\r\n    MatSortModule,\r\n    MatTableModule\r\n  ],\r\n  providers: [{ provide: APP_BASE_HREF, useValue: '/' }],\r\n  bootstrap: [AppComponent],\r\n  exports: [DashboardComponent, WordComponent]\r\n})\r\nexport class AppModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "DashboardComponent"
                        },
                        {
                            "name": "WordComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DashboardComponent"
                        },
                        {
                            "name": "WordComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-4518c33195180c88b148f5ad346bbd509e37db201ff0191c9bd5d00989bc674a7e8476b2298b5f61b74b4fa3379b6d71a3615e2cc472074cf6e416b23941131b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nconst routes: Routes = [];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "Dashboard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/dashboard.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: true\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: false\r\n}"
            },
            {
                "name": "HEIGHT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/word/word.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "8"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/dashboard.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(args: DashboardComponent) => ({\r\n\tprops: args,\r\n\tcomponet: DashboardComponent,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/words.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(args: WordComponent) => ({\r\n\tprops: args,\r\n\tcomponet: WordComponent,\r\n})"
            },
            {
                "name": "WIDTH",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/word/word.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "8"
            },
            {
                "name": "Words",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/words.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [
            {
                "name": "states",
                "childs": [
                    {
                        "name": "NOT_SELECTED",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "SELECTED",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "RIGHT",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "WRONG",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/word/word.component.ts"
            }
        ],
        "groupedVariables": {
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/stories/dashboard.stories.ts": [
                {
                    "name": "Dashboard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/dashboard.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/dashboard.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(args: DashboardComponent) => ({\r\n\tprops: args,\r\n\tcomponet: DashboardComponent,\r\n})"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: true\r\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: false\r\n}"
                }
            ],
            "src/app/word/word.component.ts": [
                {
                    "name": "HEIGHT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/word/word.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "8"
                },
                {
                    "name": "WIDTH",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/word/word.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "8"
                }
            ],
            "src/stories/words.stories.ts": [
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/words.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(args: WordComponent) => ({\r\n\tprops: args,\r\n\tcomponet: WordComponent,\r\n})"
                },
                {
                    "name": "Words",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/words.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "src/app/word/word.component.ts": [
                {
                    "name": "states",
                    "childs": [
                        {
                            "name": "NOT_SELECTED",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "SELECTED",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "RIGHT",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "WRONG",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/word/word.component.ts"
                }
            ]
        },
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/dashboard.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DashboardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/word/word.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WordComponent",
                "coveragePercent": 0,
                "coverageCount": "0/44",
                "status": "low"
            },
            {
                "filePath": "src/app/word/word.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "box",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/word/word.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "row",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/word/word.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HEIGHT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/word/word.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WIDTH",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/dashboard.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Dashboard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/dashboard.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/words.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/words.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Words",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}